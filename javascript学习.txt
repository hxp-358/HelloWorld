JavaScript 是一种脚本语言，它的解释器被称为 JavaScript 引擎。JavaScript 被发明用于在 HTML 网页上使用，给HTML网页增加动态功能。
JavaScript 代码放在 <script>……</script> 标签里
强调过 JavaScript 代码必须放置在 <script>……</script> 标签里。我们把包含代码的 <script>……</script> 标签放在了 <body>……</body> 标签里
我们除了可以把包含代码的 <script> 标签放在 <body>……</body> 标签里，还可以把它放在 <head>……</head> 标签里
放在 <head></head> 里的会比放在 <body></body> 先执行head 标签里的代码会在页面还未开始绘制之前被解析，而在 body 里的代码则会在页面渲染的同时在读取到这段代码的时候才被执行。
我们还可以把 JavaScript 的代码写在一个 js 文件中，在 HTML 里调用这个 js 文件
前两种方式都是直接把 JavaScript 代码放在 HTML 中，在页面加载的同时，那些 JavaScript 的代码就被解析了。
而把 JavaScript 代码放在外部文件中，只有在事件被触发，需要该段 JavaScript 代码时，才调用执行

JavaScript 中的变量规则和其它如 C、Java 等语言类似，建议的变量命名规则：
1.由字母、数字、下划线组成，区分大小写
2.以字母开头
3.变量名不能有空格
4.不能使用 JavaScript 中的关键字做变量名

在 JavaScript 中，变量用 Var 命令做声明
 JavaScript 中，变量也可以不作声明，而在使用时再根据数据的类型来确其变量的类型
JavaScript 中的变量同样有全局变量和局部变量之分。
全局变量是定义在所有函数之外的，其作用范围是整段 JavaScript 代码；
而局部变量是定义在函数体之内，只对其该函数是可见，而对其它函数则是不可见的。
字符串可以是引号中的任意文本，您可以使用单引号或双引号，也可以在字符串中使用引号，只要不匹配包围字符串的引号即可
var carname="shiyanlou";
var carname='shiyanlou';
var answer="I Love 'shiyanlou'";
var answer='I Love "shiyanlou"';
JavaScript 只有一种数字类型数字可以带小数点，也可以不带
布尔只能有两个值：true 或 false
var x=true
var y=false
创建一个名为 boys 的数组
var boys=new Array();
boys[0]="Tom";
boys[1]="Jack";
boys[2]="Alex";
var boys=new Array("Tom","Jack","Alex");
var boys=["Tom","Jack","Alex"];

运算符	描述	示例
+	加	x+y
-	减	x-y
*	乘	x*y
/	除	x/y
++	累加	x++
--	累减	x--
%	取余数	x%y

比较运算符的基本操作过程是，首先对它的操作数进行比较，再返回一个 true 或 False 值，有８个比较运算符:
< (小于)、> (大于)、<= (小于等于)、>= (大于等于)、== (等于)、!= (不等于)。

逻辑运算符：
运算符 实例    描述
&&     x&&y 逻辑与，当x和y同为true时返回true,否则返回false
||     x||y 逻辑或，当x和y同为false时返回false,否则返回true
?  :   C?x:y条件，当C为true时，返回x的值，否则返回y的值
&     x&y   按位与，当两个数位同时为1时，返回数据的当前位数为1，其他情况为0
|       x|y 按位或，当两个数位同时为0时，返回数据的当前数位为0，其他情况为1
^       x^y 按位异或，当两个数位有且只有一个为0时，返回的数据的当前位数为0，其他情况为1
==      x==y相等，x等于y时，返回true,否则返回false
!=      x!=y不等，x不等于y时，返回true,否则返回false

JavaScript 是一种弱类型（或称动态类型）语言，即变量的类型是不确定的
JavaScript 中的 if/else 判断选择，你会发现，就像 C 语言
if (条件 1)
  {
  当条件 1 为 true 时执行的代码;
  }
else if (条件 2)
  {
  当条件 2 为 true 时执行的代码;
  }
else
  {
  当条件 1 和 条件 2 都不为 true 时执行的代码;
  }
 switch/case 语句
switch(k)
{
case k1:
  执行代码块 1 ;
  break;

case k2:
  执行代码块 2 ;
  break;

default:
  默认执行（k 值没有在 case 中找到匹配时）;
}
 for 循环
for(变量 = 初始值 ; 循环条件 ; 变量累加方法)
{
循环语句;
}
while 循环
while (条件)
  {
  需要执行的代码;
  }

do
  {
  需要执行的代码;
  }
while (条件);
而这两者的区别是，do/while 循环在检测条件之前就会执行，也就是说，即使条件为 false，do/while 也会执行一次循环代码
break 和 continue 语句
有时候在循环体内，需要立即跳出循环或跳过循环体内其余代码而进行下一次循环，这便是 break 和 continue 的作用。
break 本语句放在循环体内，作用是立即跳出循环。
continue 本语句放在循环体内，作用是中止本次循环，并执行下一次循环。如果循环的条件已经不符合，就跳出循环。
JavaScript 函数
JavaScript 的函数可以封装那些在程序中可能要多次用到的模块，并可作为 事件驱动 的结果而调用的程序，从而实现一个函数把它与事件驱动相关联，这是与其它语言不同的地方。
在 JavaScript 中，函数由关键词 function 定义，函数可以有多个参数。基本格式为：
function 函数名 (参数1，参数2)
{
  函数体;

  return 返回值;
}
调用（使用）函数时，传入对应的参数，执行 函数体 中如 if/else，switch/case，for，while 等各种语句，可以实现各种复杂的功能
函数的重复声明：如果多次采用 function 命令重复声明同一个函数，则后面的声明会覆盖前面的声明
JavaScript 是事件驱动的，本节实验介绍什么是事件，并举例说明一些常用的事件。
 什么是事件
通常鼠标或热键的动作我们称之为 事件（Event），而由鼠标或热键引发的一连串程序的动作，称之为 事件驱动。对事件进行处理程序或函数，我们称之为 事件处理程序。
事件处理程序
在某个事件发生的时候，执行特定的 JavaScript 代码（事件处理程序）

 常用事件
onclick 单击
ondblclick 双击
onfocus 元素获得焦点
onblur 元素失去焦点

onmouseover 鼠标移到某元素之上
onmouseout 鼠标从某元素移开

onmousedown 鼠标按钮被按下
onmouseup 鼠标按键被松开

onkeydown 某个键盘按键被按下
onkeyup 某个键盘按键被松开
onkeypress 某个键盘按键被按下并松开

对象
javaScript 的所有数据都可以被视为对象，而每个对象都有其 属性（properties）和 方法（methods）。对象的 属性 是反映该对象某些特定的性质的，例如：字符串的长度、图像的长宽、文字框（Textbox）里的文字等；对象的 方法 能对该对象做一些事情，例如，表单的“提交”(Submit)，窗口的“滚动”（Scrolling）等。
创建对象
JavaScript 提供了一些常用的内置对象（稍后介绍），但是有些情况下我们需要自定义地创建对象，以达到特殊的、丰富的功能。
比如我们创建一个“student”对象，并为其指定几个 属性 和 方法：
student = new Object();  // 创建对象“student”

student.name = "Tom";   // 对象属性 名字
student.age  = "19";    // 对象属性 年龄

student.study =function() {   // 对象方法 学习
    alert("studying");
};

student.eat =function() {     // 对象方法 吃
    alert("eating");
};

var student = {};
student.name = "Tom";
……

var student = {
    name:"Tom";
     age:"19";
    ……
}

但是以上方法在创建多个对象时，会产生大量重复代码，所以我们也可以采用函数的方式新建对象：
function student(name,age) {

    this.name = name;
    this.age = age;

    this.study = function() {
        alert("studying");
    };

    this.eat = function() {
        alert("eating");
    }
}
然后通过 new 创建 student 对象的实例：
var student1 = new student('Tom','19');
var student2 = new student('Jack','20');
访问对象的属性和方法
对象的存在意义，就是为了方便地操作数据，我们可以很容易地访问对象的属性或调用对象的方法，通过符号“.”。比如我们刚才新建的 student1 对象，可以这样使用：
<script>
var x = student1.name;  // 访问对象的属性
var y = student1.age;

document.write(x);
document.write(y);
当我们需要 反复访问 某对象的时候，可以使用 with 语句简化操作，而不需要反复地用“.”符号
with(student1) {
var x = name;
var y= age;
study();
eat();
}
常用内置对象
String、Math、Array 三中常用对象及其属性和方法。
String 的属性对象只有一个属性，即 length，表示字符串中的字符个数，包括所有的空格和符号
var test_var = "I love You!";
document.write(test_var.length);
String 对象共有 19 个内置方法，主要包括字符串在页面中的显示、字体大小、字体颜色、字符的搜索以及字符的大小写转换等功能，下面是一些常用的：
charAt(n) ：返回该字符串第 n 位的单个字符。（从 0 开始计数）
charCodeAt(n) ：返回该字符串第 n 位的单个字符的 ASCII 码。
indexOf() ：用法：string_1.indexOf(string_2,n); 从字符串 string_1 的第 n 位开始搜索，查找 string_2，返回查找到的位置，如果未找到，则返回 -1，其中 n 可以不填，默认从第 0 位开始查找。
lastIndexOf() ：跟 indexOf() 相似，不过是从后边开始找。
split('分隔符') ：将字符串按照指定的分隔符分离开，返回一个数组，例如：'1&2&345&678'.split('&')；返回数组：1,2,345,678。
substring(n,m) ：返回原字符串从 n 位置到 m 位置的子串。
substr(n,x) ：返回原字符串从 n 位置开始，长度为 x 的子串。
toLowerCase() ：返回把原字符串所有大写字母都变成小写的字符串。
toUpperCase() ：返回把原字符串所有小写字母都变成大写的字符串。
Math 对象
提供对数据的数学计算。
Math 的属性
E ：返回常数 e (2.718281828...)。
LN2 ：返回 2 的自然对数 (ln 2)。
LN10 ：返回 10 的自然对数 (ln 10)。
LOG2E ：返回以 2 为低的 e 的对数 (log2e)。
LOG10E ：返回以 10 为低的 e 的对数 (log10e)。
PI ：返回π（3.1415926535...)。
SQRT1_2 ：返回 1/2 的平方根。
SQRT2 ：返回 2 的平方根。
Math 的方法
abs(x) ：返回 x 的绝对值。
round(x) ：返回 x 四舍五入后的值。
sqrt(x) ：返回 x 的平方根。
ceil(x) ：返回大于等于 x 的最小整数。
floor(x) ：返回小于等于 x 的最大整数。
sin(x) ：返回 x 的正弦。
cos(x) ：返回 x 的余弦。
tan(x) ：返回 x 的正切。
acos(x) ：返回 x 的反余弦值（余弦值等于 x 的角度），用弧度表示。
asin(x) ：返回 x 的反正弦值。
atan(x) ：返回 x 的反正切值。
exp(x) ：返回 e 的 x 次幂 (e^x)。
pow(n, m) ：返回 n 的 m 次幂 (nm)。
log(x) ：返回 x 的自然对数 (ln x)。
max(a, b) ：返回 a, b 中较大的数。
min(a, b) ：返回 a, b 中较小的数。
random() ：返回大于 0 小于 1 的一个随机数
Array 数组对象
数组对象是对象的集合，里边的对象可以是不同类型的。数组的每一个成员对象都有一个“下标”，用来表示它在数组中的位置（从 0 开始计数）。
myArray[2]="hello"
注意：JavaScript只有一维数组，要使用多维数组，请用这种虚拟法：
var myArray = new Array(new Array(), new Array(), new Array(), ...);
其实这是一个一维数组，里边的每一个元素又是一个数组。调用这个“二维数组”的元素时：
myArray[2][3] = ...;
Array 的属性
length ：返回数组的长度，即数组里有多少个元素。它等于数组里最后一个元素的下标加一。
因此，想添加一个元素，只需要：
myArray[myArray.length] = ...;
####(2)Array 的方法
- join("指定分隔符") ：返回一个字符串，把数组元素串起来，元素间用指定分隔符隔开。
- toString() ：把数组转为字符串，并返回结果。
- reverse() ：使数组元素倒序。
- slice(n,m) ：返回子数组，从数组第 n 个元素到第 m 个元素。
- sort(SortFunction) ：按照指定的 SortFunction 将数组的元素排序。
- concat(Array\_1,Array\_2) ：用于连接两个或多个数组。

JavaScript 的 DOM 操作
通过 ID、名字、标签名 选取元素；
通过 getAttribute 和 setAttribute 获取和设置元素属性；
通过 parentNode 获取父元素、createElement 动态地创建节点、appendChild 和removeChild 动态地添加或者删除节点。

DOM 是 文档对象模型（Document Object Model）的简称，它的基本思想是把结构化文档（比如 HTML 和 XML）解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。所有的节点和最终的树状结构，都有规范的对外接口，以达到使用编程语言操作文档的目的，所以，DOM 可以理解成文档（HTML 文档、XML 文档）的编程接口。

DOM 不属于 JavaScript，但是操作 DOM 是 JavaScript 最常见的任务，而 JavaScript 也是最常用于 DOM 操作的语言，本章介绍的就是 JavaScript 对 DOM 标准的实现和用法。
DOM 的最小组成单位叫做 节点（node），一个文档的树形结构（DOM 树），就是由各种不同类型的节点组成。
HTML 文档，节点主要有以下六种类型：
节点	            名称	        含义
Document	   文档节点	        整个文档（window.document）
DocumentType   文档类型节点	文档的类型
Element	   元素节点	        HTML 元素（比如<head>、<body>等）
Attribute	   属性节点	        HTML 元素的属性（比如 class="right"）
Text	         文本节点	        HTML 文档中出现的文本
DocumentFragment	文档碎片节点	文档的片段

选取文档元素
我们可以使用方法 getElementByID() 通过元素的 ID 而选取元素，并对其做操作
<html>
<body>
<div id="my_div"></div>

<script>
    document.getElementById("my_div").style.height="100px";  // 设置 my_div 高度为 100px
    document.getElementById("my_div").style.background="red"; // 设置 my_div 颜色为 红色
</script>

</body>
</html>
通过 getElementByID() 设置了 ID 为 my_div 的一个 div 标签的高度（100px）和颜色（red

通过名字（Name）或标签名（TagName）选取元素
我们还可以使用 getElementByName() 方法或者 getElementsByTagName() 方法找到元素，不过如果有多个同类型标签，那我们需要以下标来确认
<html>
<body>
<input type="text" />
<input type="text" />

<script>
document.getElementsByTagName("input")[0].value="hello";   // 下标为 [0] 表示选取第 1 个 input 标签
document.getElementsByTagName("input")[1].value="shiyanlou"; // 下标为 [1] 表示选取第 2 个 input 标签
</script>

</body>
</html>

节点、属性操作和文档遍历
 查询和设置元素的属性
可以通过 getAttribute() 和 setAttribute() 查询和设置元素的属性：
<html>
<head>
<style>
.class_1 {
    height:100px;
    width:100px;
    background:red;
}
.class_2 {
    height:100px;
    width:100px;
    background:blue;
}
</style>
</head>

<body>
<div id="div_1" class="class_1"></div>
<br/>
<a>before:</a>

<script>
document.write(document.getElementById("div_1").getAttribute("class")); // 查询 div_1 的属性
</script>

<br/>
<a>after:</a>

<script>
document.getElementById("div_1").setAttribute("class","class_2");  // 修改 div_1 的属性为 class_2
document.write(document.getElementById("div_1").getAttribute("class")); // 再次查询 div_1 的属性
</script>

</body>
</html>

